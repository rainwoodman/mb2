




import numpy as np
import sys
import os
from scipy import integrate
import math


import parameters as p

sys.path.append('subroutines/')

import readMB
import cosmocalc
import population_synthesis_mod as population_synthesis
import utilities as u
import continuum











#------------------------------------------------
# make output directories
os.system('mkdir '+p.output_dir)

if p.output_SEDs==True:
    os.system('mkdir '+p.output_dir+'/neb')
    os.system('mkdir '+p.output_dir+'/SEDs')
    os.system('mkdir '+p.output_dir+'/StellarSEDs')



#-------------------
# for nebula emission
nebula_lines = {'Peta': {0.0040000000000000001: 0.0184, 0.050000000000000003: 0.0184, 0.0080000000000000002: 0.0184, 0.00040000000000000002: 0.0184, 'l': 9014.8999999999996, 0.02: 0.0184}, '[OIII]4363.00': {0.0040000000000000001: 0.066000000000000003, 0.050000000000000003: 0.01, 0.0080000000000000002: 0.01, 0.00040000000000000002: 0.109, 'l': 4363.0, 0.02: 0.01}, '[NII]6583.45': {0.0040000000000000001: 0.17499999999999999, 0.050000000000000003: 0.40400000000000003, 0.0080000000000000002: 0.40400000000000003, 0.00040000000000000002: 0.014999999999999999, 'l': 6583.4499999999998, 0.02: 0.40400000000000003}, '[NII]5755.00': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.01, 0.0080000000000000002: 0.01, 0.00040000000000000002: 0.0, 'l': 5755.0, 0.02: 0.01}, 'Hkappa': {0.0040000000000000001: 0.030550000000000001, 0.050000000000000003: 0.030550000000000001, 0.0080000000000000002: 0.030550000000000001, 0.00040000000000000002: 0.030550000000000001, 'l': 3750.0, 0.02: 0.030550000000000001}, 'Ptheta': {0.0040000000000000001: 0.0138, 0.050000000000000003: 0.0138, 0.0080000000000000002: 0.0138, 0.00040000000000000002: 0.0138, 'l': 8862.7999999999993, 0.02: 0.0138}, '[NII]6548.05': {0.0040000000000000001: 0.058999999999999997, 0.050000000000000003: 0.13600000000000001, 0.0080000000000000002: 0.13600000000000001, 0.00040000000000000002: 0.0050000000000000001, 'l': 6548.0500000000002, 0.02: 0.13600000000000001}, '[SII]6730.00': {0.0040000000000000001: 0.13800000000000001, 0.050000000000000003: 0.20999999999999999, 0.0080000000000000002: 0.20999999999999999, 0.00040000000000000002: 0.029000000000000001, 'l': 6730.0, 0.02: 0.20999999999999999}, '[OIII]1663.0': {0.0040000000000000001: 0.058000000000000003, 0.050000000000000003: 0.01, 0.0080000000000000002: 0.01, 0.00040000000000000002: 0.0, 'l': 1663.0, 0.02: 0.01}, '[OI]': {0.0040000000000000001: 0.041000000000000002, 0.050000000000000003: 0.13, 0.0080000000000000002: 0.13, 0.00040000000000000002: 0.0080000000000000002, 'l': 6300.0, 0.02: 0.13}, 'Htheta': {0.0040000000000000001: 0.053039999999999997, 0.050000000000000003: 0.053039999999999997, 0.0080000000000000002: 0.053039999999999997, 0.00040000000000000002: 0.053039999999999997, 'l': 3797.0, 0.02: 0.053039999999999997}, 'Hiota': {0.0040000000000000001: 0.039750000000000001, 0.050000000000000003: 0.039750000000000001, 0.0080000000000000002: 0.039750000000000001, 0.00040000000000000002: 0.039750000000000001, 'l': 3770.0, 0.02: 0.039750000000000001}, '[NI]': {0.0040000000000000001: 0.01, 0.050000000000000003: 0.029999999999999999, 0.0080000000000000002: 0.029999999999999999, 0.00040000000000000002: 0.0030000000000000001, 'l': 5199.0, 0.02: 0.029999999999999999}, '[CII]1335.0': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.11, 0.0080000000000000002: 0.11, 0.00040000000000000002: 0.0, 'l': 1335.0, 0.02: 0.11}, '[SII]10336.41': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.050000000000000003, 0.0080000000000000002: 0.050000000000000003, 0.00040000000000000002: 0.0, 'l': 10336.41, 0.02: 0.050000000000000003}, 'Heta': {0.0040000000000000001: 0.07306, 0.050000000000000003: 0.07306, 0.0080000000000000002: 0.07306, 0.00040000000000000002: 0.07306, 'l': 3835.0, 0.02: 0.07306}, 'Pgamma': {0.0040000000000000001: 0.090399999999999994, 0.050000000000000003: 0.090399999999999994, 0.0080000000000000002: 0.090399999999999994, 0.00040000000000000002: 0.090399999999999994, 'l': 10938.1, 0.02: 0.090399999999999994}, 'P12': {0.0040000000000000001: 0.0106, 0.050000000000000003: 0.0106, 0.0080000000000000002: 0.0106, 0.00040000000000000002: 0.0106, 'l': 8750.5, 0.02: 0.0106}, '[OIII]5006.84': {0.0040000000000000001: 4.7519999999999998, 0.050000000000000003: 4.0810000000000004, 0.0080000000000000002: 4.0810000000000004, 0.00040000000000000002: 3.1589999999999998, 'l': 5006.8400000000001, 0.02: 4.0810000000000004}, '[OII]3727.0': {0.0040000000000000001: 1.7909999999999999, 0.050000000000000003: 3.0099999999999998, 0.0080000000000000002: 3.0099999999999998, 0.00040000000000000002: 0.48899999999999999, 'l': 3727.0, 0.02: 3.0099999999999998}, '[NII]2141.0': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.01, 0.0080000000000000002: 0.01, 0.00040000000000000002: 0.0, 'l': 2141.0, 0.02: 0.01}, '[NeIII]': {0.0040000000000000001: 0.41599999999999998, 0.050000000000000003: 0.29999999999999999, 0.0080000000000000002: 0.29999999999999999, 0.00040000000000000002: 0.29499999999999998, 'l': 3869.0, 0.02: 0.29999999999999999}, '[ArIII]7751.11': {0.0040000000000000001: 0.17599999999999999, 0.050000000000000003: 0.085999999999999993, 0.0080000000000000002: 0.085999999999999993, 0.00040000000000000002: 0.067000000000000004, 'l': 7751.1099999999997, 0.02: 0.085999999999999993}, 'Hxi': {0.0040000000000000001: 0.1051, 0.050000000000000003: 0.1051, 0.0080000000000000002: 0.1051, 0.00040000000000000002: 0.1051, 'l': 3889.0, 0.02: 0.1051}, '[HeI]6678.00': {0.0040000000000000001: 0.029999999999999999, 0.050000000000000003: 0.029999999999999999, 0.0080000000000000002: 0.029999999999999999, 0.00040000000000000002: 0.025999999999999999, 'l': 6678.0, 0.02: 0.029999999999999999}, 'H18': {0.0040000000000000001: 0.0090600000000000003, 0.050000000000000003: 0.0090600000000000003, 0.0080000000000000002: 0.0090600000000000003, 0.00040000000000000002: 0.0090600000000000003, 'l': 3692.0, 0.02: 0.0090600000000000003}, 'Pbeta': {0.0040000000000000001: 0.16300000000000001, 0.050000000000000003: 0.16300000000000001, 0.0080000000000000002: 0.16300000000000001, 0.00040000000000000002: 0.16300000000000001, 'l': 12818.1, 0.02: 0.16300000000000001}, 'H_epsilon + [NeIII]': {0.0040000000000000001: 0.28299999999999997, 0.050000000000000003: 0.159, 0.0080000000000000002: 0.159, 0.00040000000000000002: 0.27000000000000002, 'l': 3970.0, 0.02: 0.159}, 'Bdelta': {0.0040000000000000001: 0.01915, 0.050000000000000003: 0.01915, 0.0080000000000000002: 0.01915, 0.00040000000000000002: 0.01915, 'l': 19445.0, 0.02: 0.01915}, ' H_zeta+ [HeI]': {0.0040000000000000001: 0.192, 0.050000000000000003: 0.107, 0.0080000000000000002: 0.107, 0.00040000000000000002: 0.20300000000000001, 'l': 3889.0, 0.02: 0.107}, '[HeI]}': {0.0040000000000000001: 0.035999999999999997, 0.050000000000000003: 0.050000000000000003, 0.0080000000000000002: 0.050000000000000003, 0.00040000000000000002: 0.035999999999999997, 'l': 4471.0, 0.02: 0.050000000000000003}, '[SIII]6312.0': {0.0040000000000000001: 0.017000000000000001, 0.050000000000000003: 0.029999999999999999, 0.0080000000000000002: 0.029999999999999999, 0.00040000000000000002: 0.0089999999999999993, 'l': 6312.0, 0.02: 0.029999999999999999}, 'H13': {0.0040000000000000001: 0.02401, 0.050000000000000003: 0.02401, 0.0080000000000000002: 0.02401, 0.00040000000000000002: 0.02401, 'l': 3735.0, 0.02: 0.02401}, 'H14': {0.0040000000000000001: 0.019210000000000001, 0.050000000000000003: 0.019210000000000001, 0.0080000000000000002: 0.019210000000000001, 0.00040000000000000002: 0.019210000000000001, 'l': 3723.0, 0.02: 0.019210000000000001}, 'H15': {0.0040000000000000001: 0.01562, 0.050000000000000003: 0.01562, 0.0080000000000000002: 0.01562, 0.00040000000000000002: 0.01562, 'l': 3713.0, 0.02: 0.01562}, 'H16': {0.0040000000000000001: 0.012880000000000001, 0.050000000000000003: 0.012880000000000001, 0.0080000000000000002: 0.012880000000000001, 0.00040000000000000002: 0.012880000000000001, 'l': 3704.0, 0.02: 0.012880000000000001}, 'H17': {0.0040000000000000001: 0.01074, 0.050000000000000003: 0.01074, 0.0080000000000000002: 0.01074, 0.00040000000000000002: 0.01074, 'l': 3698.0, 0.02: 0.01074}, '[OIII]4958.91': {0.0040000000000000001: 1.617, 0.050000000000000003: 1.399, 0.0080000000000000002: 1.399, 0.00040000000000000002: 1.097, 'l': 4958.9099999999999, 0.02: 1.399}, '[CII]2326.00': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.28999999999999998, 0.0080000000000000002: 0.28999999999999998, 0.00040000000000000002: 0.0, 'l': 2326.0, 0.02: 0.28999999999999998}, 'Lalpha': {0.0040000000000000001: 23.699999999999999, 0.050000000000000003: 23.699999999999999, 0.0080000000000000002: 23.699999999999999, 0.00040000000000000002: 23.699999999999999, 'l': 1216.0, 0.02: 23.699999999999999}, '[HeI]5876.00': {0.0040000000000000001: 0.108, 0.050000000000000003: 0.14000000000000001, 0.0080000000000000002: 0.14000000000000001, 0.00040000000000000002: 0.096000000000000002, 'l': 5876.0, 0.02: 0.14000000000000001}, '[ArIV]+[HeI]': {0.0040000000000000001: 0.014, 0.050000000000000003: 0.0, 0.0080000000000000002: 0.0, 0.00040000000000000002: 0.01, 'l': 4711.0, 0.02: 0.0}, '[CIII]': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.17999999999999999, 0.0080000000000000002: 0.17999999999999999, 0.00040000000000000002: 0.0, 'l': 1909.0, 0.02: 0.17999999999999999}, 'Hbeta': {0.0040000000000000001: 1.0, 0.050000000000000003: 1.0, 0.0080000000000000002: 1.0, 0.00040000000000000002: 1.0, 'l': 4861.0, 0.02: 1.0}, 'Hdelta': {0.0040000000000000001: 0.2591, 0.050000000000000003: 0.2591, 0.0080000000000000002: 0.2591, 0.00040000000000000002: 0.2591, 'l': 4101.0, 0.02: 0.2591}, '[SIII]9530.85': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.36499999999999999, 0.0080000000000000002: 0.36499999999999999, 0.00040000000000000002: 0.0, 'l': 9530.8500000000004, 0.02: 0.36499999999999999}, '[SII]6716.00': {0.0040000000000000001: 0.188, 0.050000000000000003: 0.29999999999999999, 0.0080000000000000002: 0.29999999999999999, 0.00040000000000000002: 0.036999999999999998, 'l': 6716.0, 0.02: 0.29999999999999999}, 'Bgamma': {0.0040000000000000001: 0.02928, 0.050000000000000003: 0.02928, 0.0080000000000000002: 0.02928, 0.00040000000000000002: 0.02928, 'l': 21656.0, 0.02: 0.02928}, 'Pdelta': {0.0040000000000000001: 0.055300000000000002, 0.050000000000000003: 0.055300000000000002, 0.0080000000000000002: 0.055300000000000002, 0.00040000000000000002: 0.055300000000000002, 'l': 10049.4, 0.02: 0.055300000000000002}, '[SII]10320.49': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.058000000000000003, 0.0080000000000000002: 0.058000000000000003, 0.00040000000000000002: 0.0, 'l': 10320.49, 0.02: 0.058000000000000003}, '[SIII]9068.60': {0.0040000000000000001: 0.51000000000000001, 0.050000000000000003: 0.94499999999999995, 0.0080000000000000002: 0.94499999999999995, 0.00040000000000000002: 0.0, 'l': 9068.6000000000004, 0.02: 0.94499999999999995}, 'Palpha': {0.0040000000000000001: 0.30099999999999999, 0.050000000000000003: 0.30099999999999999, 0.0080000000000000002: 0.30099999999999999, 0.00040000000000000002: 0.30099999999999999, 'l': 18751.0, 0.02: 0.30099999999999999}, 'Balpha': {0.0040000000000000001: 0.089940000000000006, 0.050000000000000003: 0.089940000000000006, 0.0080000000000000002: 0.089940000000000006, 0.00040000000000000002: 0.089940000000000006, 'l': 40512.0, 0.02: 0.089940000000000006}, '[ArIII]7135.79': {0.0040000000000000001: 0.070999999999999994, 0.050000000000000003: 0.035000000000000003, 0.0080000000000000002: 0.035000000000000003, 0.00040000000000000002: 0.027, 'l': 7135.79, 0.02: 0.035000000000000003}, 'Hepsilon': {0.0040000000000000001: 0.15909999999999999, 0.050000000000000003: 0.15909999999999999, 0.0080000000000000002: 0.15909999999999999, 0.00040000000000000002: 0.15909999999999999, 'l': 3970.0, 0.02: 0.15909999999999999}, '[MgII]': {0.0040000000000000001: 0.31, 0.050000000000000003: 0.070000000000000007, 0.0080000000000000002: 0.070000000000000007, 0.00040000000000000002: 0.0, 'l': 2798.0, 0.02: 0.070000000000000007}, 'Pxi': {0.0040000000000000001: 0.025399999999999999, 0.050000000000000003: 0.025399999999999999, 0.0080000000000000002: 0.025399999999999999, 0.00040000000000000002: 0.025399999999999999, 'l': 9229.0, 0.02: 0.025399999999999999}, '[SII]4076.35': {0.0040000000000000001: 0.0070000000000000001, 0.050000000000000003: 0.010999999999999999, 0.0080000000000000002: 0.010999999999999999, 0.00040000000000000002: 0.002, 'l': 4076.3499999999999, 0.02: 0.010999999999999999}, 'Hgamma': {0.0040000000000000001: 0.46100000000000002, 0.050000000000000003: 0.46100000000000002, 0.0080000000000000002: 0.46100000000000002, 0.00040000000000000002: 0.46100000000000002, 'l': 4340.0, 0.02: 0.46100000000000002}, 'Pepsilon': {0.0040000000000000001: 0.036499999999999998, 0.050000000000000003: 0.036499999999999998, 0.0080000000000000002: 0.036499999999999998, 0.00040000000000000002: 0.036499999999999998, 'l': 9546.0, 0.02: 0.036499999999999998}, 'Bbeta': {0.0040000000000000001: 0.048509999999999998, 0.050000000000000003: 0.048509999999999998, 0.0080000000000000002: 0.048509999999999998, 0.00040000000000000002: 0.048509999999999998, 'l': 26252.0, 0.02: 0.048509999999999998}, '[SII]4068.6': {0.0040000000000000001: 0.017000000000000001, 0.050000000000000003: 0.029000000000000001, 0.0080000000000000002: 0.029000000000000001, 0.00040000000000000002: 0.0050000000000000001, 'l': 4068.5999999999999, 0.02: 0.029000000000000001}, 'Halpha': {0.0040000000000000001: 2.915, 0.050000000000000003: 2.915, 0.0080000000000000002: 2.915, 0.00040000000000000002: 2.915, 'l': 6562.0, 0.02: 2.915}, '[OII]7319.99': {0.0040000000000000001: 0.027, 0.050000000000000003: 0.025999999999999999, 0.0080000000000000002: 0.025999999999999999, 0.00040000000000000002: 0.012, 'l': 7319.9899999999998, 0.02: 0.025999999999999999}, '[SII]10286.73': {0.0040000000000000001: 0.0, 0.050000000000000003: 0.048000000000000001, 0.0080000000000000002: 0.048000000000000001, 0.00040000000000000002: 0.0, 'l': 10286.73, 0.02: 0.048000000000000001}, '[HeI]4026.0': {0.0040000000000000001: 0.014999999999999999, 0.050000000000000003: 0.014999999999999999, 0.0080000000000000002: 0.014999999999999999, 0.00040000000000000002: 0.014999999999999999, 'l': 4026.0, 0.02: 0.014999999999999999}, '[OII]7330.73': {0.0040000000000000001: 0.014, 0.050000000000000003: 0.014, 0.0080000000000000002: 0.014, 0.00040000000000000002: 0.0070000000000000001, 'l': 7330.7299999999996, 0.02: 0.014}, '[HeI]7065.00': {0.0040000000000000001: 0.023, 0.050000000000000003: 0.040000000000000001, 0.0080000000000000002: 0.040000000000000001, 0.00040000000000000002: 0.028000000000000001, 'l': 7065.0, 0.02: 0.040000000000000001}}
velocity=1000.


#------------------------------------------------
#------------------------------------------------
#determine relations between redshift and age
aou_cz=cosmocalc.cosmocalc(p.snap_z)['zage_Gyr']
redshifts=np.arange(p.snap_z,20,0.1)
ages=[]
for z in redshifts:
    aou_z=cosmocalc.cosmocalc(z)['zage_Gyr']
    ages.append(aou_cz-aou_z)
ages=np.array(ages)


#------------------------------------------------
#------------------------------------------------
# read in SSPs
mets=[0.05,0.02,0.008,0.004,0.0004]
metsl={0.05:'005',0.02:'002',0.008:'0008',0.004:'0004',0.0004:'00004'}

ssp={}
for Z in mets:ssp[Z]=getattr(population_synthesis,'pegase')('Salpeter/i.z'+metsl[Z])

lam=ssp[0.02]['lam']
lamz=lam*(1.+p.snap_z)

#------------------------------------------------
# save wavelength grid
np.save('lam.npy',lam)

#------------------------------------------------
# build IGM array
igm=continuum.expteff(lam*(1.+p.snap_z),p.snap_z)


#------------------------------------------------
#------------------------------------------------
# Define observed Filters

#------------------------------------------------
#Read in filter transmission curves, and interpolate onto wavelength grid
obs_fT={}
obs_filters=[]
for filter_set_key in p.obs_filter_sets.keys():
    for f in p.obs_filter_sets[filter_set_key]:     
    
        obs_filters.append(f)
    
        fname='filters/'+filter_set_key.split('.')[0]+'/'+filter_set_key.split('.')[1]+'/'+f+'.txt'
        d=u.readc(fname,5)
        filter_trans_l=np.array(map(float,d[0]))
        filter_trans_T=np.array(map(float,d[1]))            
        maxT=np.max(filter_trans_T)
        filter_trans_T[np.where(filter_trans_T<0.05*maxT)]=0.0                                
        obs_fT[f]=np.interp(lamz,filter_trans_l,filter_trans_T)








#------------------------------------------------
#------------------------------------------------
# Define rest_frame filters - suffixed '_r'
  
#------------------------------------------------
#Read in filter transmission curves, and interpolate onto wavelength grid
rest_fT={}
rf_filters=[]
for filter_set_key in p.rf_filter_sets.keys():
    for f in p.rf_filter_sets[filter_set_key]:   
    
        rf_filters.append(f)
       
        fname='filters/'+filter_set_key.split('.')[0]+'/'+filter_set_key.split('.')[1]+'/'+f+'.txt'
        d=u.readc(fname,5)
        filter_trans_l=np.array(map(float,d[0]))
        filter_trans_T=np.array(map(float,d[1]))            
        maxT=np.max(filter_trans_T)
        filter_trans_T[np.where(filter_trans_T<0.05*maxT)]=0.0                                
        rest_fT[f]=np.interp(lam,filter_trans_l,filter_trans_T)







#------------------------------------------------
#------------------------------------------------
# Main Code


#------------------------------------------------
#------------------------------------------------
# setup outputs
out_cols=['index','gas_mass','BH_mass','DM_mass','sfr','stellar_mass']+['stellar_mass_wrec']+[f for f in obs_filters]+[f+'_r' for f in rf_filters]
properties={}





MBHS = readMB.MBHaloStars(p.halo_file,p.stars_file)

print 'Total Number of Halos:',len(MBHS)

print '-------------------------------'
print '-------------------------------'


if p.halo_ID is False:
    do_halos=len(MBHS) #do all halos
else:
    do_halos=1


for i in range(do_halos):


    if p.halo_ID is False:
        id=i    
    else:
        id=p.halo_ID
        
    halo,stars=MBHS[id]
         
    sfr=halo[10]    
    stellar_mass=halo[8][4]*10**10
    gas_mass=halo[8][0]*10**10
    BH_mass=halo[8][5]*10**10
    DM_mass=halo[8][1]*10**10
    n_DM=(halo[8][1]*10**10)/(1.1*10**7) #MBII Dark matter particle mass

    
    #------------------------------------------------
    # check the halo meets the stellar mass and number of DM particles limits
    
    halo_selected=True
    
    if p.stellar_mass_limit != False:
        if np.log10(stellar_mass)<p.stellar_mass_limit:
            halo_selected=False
            
    if p.dark_matter_particle_limit != False:
        if n_DM<p.dark_matter_particle_limit:
            halo_selected=False    
    
    
    #------------------------------------------------
    # construct stellar SED and nebula lines
       
    if halo_selected==True:
        
        properties['index']=i
        properties['gas_mass']=gas_mass
        properties['DM_mass']=DM_mass
        properties['stellar_mass']=stellar_mass
        properties['BH_mass']=BH_mass
        properties['sfr']=sfr
        
        
        print '-------------------------------'
        print '-------------------------------'
        
        print 'Halo ID:',id
        print 'log10(M_DM):',np.round(np.log10(DM_mass),3)
        print 'log10(M_*):',np.round(np.log10(stellar_mass),3)
        
        
        stellar_mass_wrec=0.0 #stellar masses corrected for recycling
        
        
        for si,s in enumerate(stars):
            mass=s[1]
            z=(1./s[2])-1
            
            Z=s[3]
            Zi=u.find_nearest(mets,Z)
            Zn=mets[Zi]
            
            age=np.interp(z,redshifts,ages)*1000.
            agei=u.find_nearest(ssp[Zn]['age'],age)
            agen=ssp[Zn]['age'][agei]
            
            stellar_mass_wrec+=mass*ssp[Zn]['frac'][agei]
            
                        
            ste_sed=(10**10)*mass*ssp[Zn]['sed'][agei] # stellar SED for just this star!
            
            Hbeta_flux=mass*(10**10)*ssp[Zn]['nebula_lines']['fluxes']['Hbeta'][agei]
                                                              
            if si==0:
                stellar_sed=ste_sed
                lam=ssp[Zn]['lam']                
                nbl={}
                for line in nebula_lines.keys():nbl[line]=Hbeta_flux*nebula_lines[line][Zn]                                                       
            else:
                stellar_sed=stellar_sed+ste_sed
                for line in nebula_lines.keys():nbl[line]=nbl[line]+Hbeta_flux*nebula_lines[line][Zn]  

                    

        #------------------------------------------------
        # save stellar mass with recycling
        
        stellar_mass_wrec=stellar_mass_wrec*10**10
        properties['stellar_mass_wrec']=stellar_mass_wrec
        
        print 'log10(M_*_rec):',np.round(np.log10(stellar_mass_wrec),3)
        print 'fraction of initial mass remaining:',np.round(stellar_mass_wrec/stellar_mass,3)
        
        
                
        #------------------------------------------------
        # add nebula lines 
                
        if p.include_nebular_emission==True:
        
            stellar_sed_lam=stellar_sed*(3.*10**8)*(10**10)/(lam**2)

            sed_lam=stellar_sed_lam
            for line in nebula_lines.keys():
                l=nebula_lines[line]['l']
                FWHM=velocity*l/(299792.) #l in \AA, velocity in kms, c in kms
                sigma=FWHM/2.3548                        
                sed_lam=sed_lam+nbl[line]*(1./(sigma*np.sqrt(2.*math.pi)))*(np.exp(-((lam-l)**2)/(2.*sigma**2)))
       
            sed=sed_lam/((3.*10**8)*(10**10)/(lam**2)) #convert back to f_nu
        
        else:
            
            sed=stellar_sed
        
         
                
        #-------
        # apply IGM absorption
        
        if p.apply_IGM_absorption==True:       
            sed=sed*igm
        
        
#         if output_SEDs==True:
#         
#             #-------
#             # save full SED
#             np.save(MB+'/'+str(cz)+'/SEDs/'+str(i)+'.npy',sed) 
#             np.save(MB+'/'+str(cz)+'/StellarSEDs/'+str(i)+'.npy',stellar_sed) 
#         

                
        #--------
        # determine fluxes in each band 
        for f in obs_filters:
            properties[f]=integrate.trapz(sed*obs_fT[f],x=lamz)/integrate.trapz(obs_fT[f],x=lamz)
        for f in rf_filters:
            properties[f+'_r']=integrate.trapz(sed*rest_fT[f],x=lam)/integrate.trapz(rest_fT[f],x=lam)
        
        print '---- --------------------- ----'
        print '---- rest-frame photometry ----'
        
        for f in rf_filters:
            print f,np.round(properties[f+'_r']/10**28,3)      

        print '-- observed-frame photometry --'
        
        for f in obs_filters:
            print f,np.round(properties[f]/10**28,3)    

